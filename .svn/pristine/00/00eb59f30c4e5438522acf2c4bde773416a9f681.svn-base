package sangchu.mypage.dao;

import java.util.List;

import org.apache.ibatis.session.SqlSession;

import mybatis.config.MybatisUtil;
import sangchu.main.vo.MemberVO;
import sangchu.mypage.vo.JjimVO;
import sangchu.mypage.vo.RegTradeVO;
import sangchu.mypage.vo.TradeLogVO;

public class MypageDaoImpl implements IMypageDao {
	private static IMypageDao dao;
	private MypageDaoImpl() {}
	private SqlSession session;
	public static IMypageDao getInstance() {
		if(dao==null) dao = new MypageDaoImpl();
		return dao;
	}
	
	/*
		최초 작성자 : 김석호 
		최초 작성일 : 2023.08.10 13:37
		
			
		최근 수정자 : 김석호
		최근 수정일 : 2023.08.12 12:56
		
		수정 내역
		2023.08.11 11:16 - 김석호 : 신규 메소드 세션 미생성 부분 수정
		2023.08.11 22:57 - 김석호 : 닉네임변경용 메소드 추가
		2023.08.12 00:31 - 김석호 : 닉네임변경 메소드 파라미터 String > MemberVO 변경
		2023.08.12 09:34 - 김석호 : 탈퇴일 처리용 메소드 추가
		2023.08.12 12:56 - 김석호 : 거래기록관련 메소드 추가
		
		마이 페이지에서 필요한 정보를 처리하기 위한 Dao객체입니다.
	*/
	
	@Override
	public List<JjimVO> getAllJjimList(String email) {
		List<JjimVO> list = null;
		session = MybatisUtil.getSqlSession();
		try {
			list = session.selectList("mypage.getAllJjimList", email);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("getAllJjimList메소드에서 오류");
		}finally {
			if(session!=null) session.close();
		}
		return list;
	}

	@Override
	public String getOneImgSrc(String t_no) {
		String src = null;
		session = MybatisUtil.getSqlSession();
		try {
			src = session.selectOne("mypage.getOneImgSrc", t_no);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("getOneImgSrc메소드에서 오류");
		}finally {
			if(session!=null) session.close();
		}
		return src;
	}

	@Override
	public List<RegTradeVO> getmyRegList(String email) {
		List<RegTradeVO> list = null;
		session = MybatisUtil.getSqlSession();
		try {
			list = session.selectList("mypage.getmyRegList", email);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("getmyRegList메소드에서 오류");
		}finally {
			if(session!=null) session.close();
		}
		return list;
	}

	@Override
	public int checkNickname(String targetNickname) {
		int res = 1;
		session = MybatisUtil.getSqlSession();
		try {
			res = session.selectOne("mypage.checkNickname", targetNickname);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("checkNickname메소드에서 오류");
		}finally {
			if(session!=null) session.close();
		}
		return res;
	}

	@Override
	public int updateNickName(MemberVO memVO) {
		int res = 0;
		session = MybatisUtil.getSqlSession();
		try {
			res = session.update("mypage.updateNickName", memVO);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("updateNickName메소드에서 오류");
		}finally {
			if(res>0) session.commit();
			if(session!=null) session.close();
		}
		return res;
	}

	@Override
	public int escapeHere(String email) {
		int res = 0;
		session = MybatisUtil.getSqlSession();
		try {
			res = session.update("mypage.escapeHere", email);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("escapeHere메소드에서 오류");
		}finally {
			if(res>0) session.commit();
			if(session!=null) session.close();
		}
		return res;
	}

	@Override
	public List<TradeLogVO> forAllTradeLog(String email) {
		List<TradeLogVO> list = null;
		session = MybatisUtil.getSqlSession();
		try {
			list = session.selectList("mypage.forAllTradeLog", email);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("forAllTradeLog메소드에서 오류");
		}finally {
			if(session!=null) session.close();
		}
		return list;
	}

}
