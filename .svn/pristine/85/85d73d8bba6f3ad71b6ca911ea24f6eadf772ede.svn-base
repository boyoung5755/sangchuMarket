package sangchu.login.controller;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import sangchu.login.service.ILoginService;
import sangchu.login.service.LoginServiceImpl;
import sangchu.main.vo.MemberVO;

@WebServlet("/login.do")
public class Login extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		
		
		
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		response.setContentType("text/html; charset=utf-8");
		
		String inputEmail = request.getParameter("email");
		String inputPass = request.getParameter("password");
		String checkbox = request.getParameter("checkbox");
		
		response.setCharacterEncoding("utf-8");
		Cookie cookie = new Cookie("userEmail", inputEmail);
		
		System.out.println("이메일 저장하기 checkbox =>" + checkbox);
		
		if(checkbox!=null) { //이메일 기억하기 체크박스 체크시
			response.addCookie(cookie);;
		}else {//로그인 기억하기 체크 안되어있을 시
			cookie.setMaxAge(0); //쿠키 비우기 (쿠키 유효기간 0으로 set, 브라우저에서 삭제)
			response.addCookie(cookie);
		}
		
		MemberVO memVO = new MemberVO();
		memVO.setEmail(inputEmail);
		memVO.setPass(inputPass);
		
		ILoginService service = LoginServiceImpl.getInstance();
		int res = service.login(memVO); //DB에 계정이 존재하면 1, 없으면 0 반환
		System.out.println(res);
		
		HttpSession session = request.getSession();
		
		if(res>0) { //계정 존재 ==> 로그인 성공
			
			//로그인 성공 후에는 세션에 "email"이라는 세션이름으로 이메일만 저장
			session.setAttribute("email", inputEmail);
	
			//inputEmail의 A_code를 확인 (1:admin, 0:user)
			String resStr = service.checkACode(inputEmail);
			
			if(resStr.equals("0")) { //admin 계정
				//관리자 메인으로 이동
				//response.sendRedirect(request.getContextPath() + "/"); 
				response.sendRedirect("https://www.w3schools.com/"); //테스트용으로 여기로 이동 ..
				
			}else { //user 계정
				//사용자의 마지막 로그인 날짜를 sysdate로 업데이트
				int resUpdateSysdate = service.updateLogindate(inputEmail); //update 성공하면  1 반환, 실패하면 0 반환
				System.out.println("마지막 로그인 날짜 업데이트 결과 (성공:1 / 실패:0) => " + resUpdateSysdate);
				
				//유저 메인으로 이동
				//response.sendRedirect(request.getContextPath() + "/sangchuMain.do");
				
				//테스트용으로 user 계정 로그인 성공시 -> 개발원 홈페이지로 이동
				response.sendRedirect("https://www.ddit.or.kr/?gclid=Cj0KCQjwldKmBhCCARIsAP-0rfz8IbxFLMWNTt-7JF2JV76wHp0E6M9q64q3AqhqINa5pJpm7fhiYGMaAq36EALw_wcB"); 
			
				/*
					user 로그인 성공 후에는
						- 마지막 로그인 날짜 udpate
						- session에 이메일이 저장되어 있어야 함
						- 개발원 홈페이지로 이동
				*/
			}
			
		}else { //로그인 실패 (아이디, 비밀번호가 일치하지 않거나, 존재하지 않는 아이디일 때)
			
			//세션에 로그인 시도 횟수, 이메일을 저장
			
			// 1) 이메일 중복검사 메소드 이용해서, 존재하는 이메일인지 판단
			// 2) 존재하는 이메일이지만, 이메일과 비밀번호가 일치하지 않는 경우 판단
			
			String emailExist = service.checkEmail(inputEmail);
			PrintWriter writer = response.getWriter();
			
			if(emailExist==null) { //존재하지 않는 이메일일때
				writer.println("<script>alert('존재하지 않는 이메일입니다.'); history.back(); </script>");
			}else { //이메일은 존재하지만 아이디, 비밀번호가 일치하지 않을때
				
				/*
					로그인 시도 횟수를 반환하는 메소드
					결과값을 tempPass에 저장하고
					
					시도할때마다 => +1 (로그인시도횟수 +1)하는 메소드
					로그인 시도횟수를 가져오는 메소드
				*/
				//로그인 시도 횟수 +1
				
				int updateCount = service.updateTempPass(inputEmail);
				if(updateCount>0) {
					System.out.println("로그인 시도 횟수 +1 성공 !");
				}else {
					System.out.println("로그인 시도 횟수 +1 실패");
				}
				
				int tempPass = service.getTempPass(inputEmail);
				System.out.println("현재 로그인 시도 횟수==> " + tempPass);
				
				writer.println("<script>alert('아이디와 비밀번호가 일치하지 않습니다.'); history.back(); </script>");
				writer.close();
				
				//5회마다 캡차 api
				if(tempPass%5==0) {
					//캡챠 api 사용후 다시 시도하게
					System.out.println("캡차 api로 로그인 제한 예정");
				}
				
				
			}
			
		}
		
	}

}
