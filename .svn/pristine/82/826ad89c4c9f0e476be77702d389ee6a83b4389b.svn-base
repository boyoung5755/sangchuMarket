<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<!--
	최초 작성자 : 김석호
	최초 작성일 : 2023.08.08 12:37
	
	최근 수정자 : 김석호
	최근 수정일 : 2023.08.09 19:43
	
	수정 이력 :
	2023.08.09 19:43 - 김석호 : 상추톡 서블릿 구현과 변수명 맞췄습니다.
	
	마이페이지 우측 기본화면 하단 상추톡 페이지입니다.
	 
 -->
<title>채팅방 만드는중이에요..</title>
</head>
<body>






















































</body>
<script type="text/javascript">
	$(function(){
		
	});




   	let webSocket = null; // 웹소켓 변수 선언
	const contextPath = "<%=request.getContextPath()%>";
	// 메시지를 출력하는 위치 가져오기
	const messageTextArea = document.getElementById("messageTextArea");
	// 여기 가져오는거.. 채팅방의 출력란 부모인 div를 가져와서 출력할 때 append로 해줘야함
	// ------------------------------------------------------------------------------
	
	
	// 오른쪽에 열리는 채팅방의 입력란 가져오기
   	const messageText = document.getElementById("messageText");
   	// 처음 접속하기 버튼 누를때 입력했던 사용자 ID
   	// 로그인 유저 정보 입력하는 곳
   	const userMail = ""; // 이메일정보 여기서 세팅한다.
   	const userNick = ""; // 닉네임정보
   	/*
   		왼쪽에서 채팅방을 클릭하면, 해당 채팅방의 번호를 가지고와서 오른쪽에 열어준다.
   		룸넘버를 romm이라는 변수에 저장해야한다.
   		 
   	*/
   	/*
   		function 하나 열어서 왼쪽의 채팅방을 열면 ajax로 먼저 채팅 리스트 갖고 온다.
   		갖고 와서 오른쪽에 채팅이력 쭉 출력먼저 해주고,
   		그다음 connection함수를 호출한다.
		이 부분에서 오른쪽에 창 열어줘야함. 창 열때 채팅방번호 가지고 서블릿으로 갔다와야함
	*/
   	//채팅방 목록 리스트가 있는 그거! 클래스로 하면 될 듯
   	$('').on('click','',function(){
   		var room = $(this).attr('idx');
   		$.ajax({
   			url : contextPath+"/getAllChatList.do",
   			data : "email="+userMail,
   			dataType:'json',
   			type : 'get',
   			success : function(res){
   				// 왼쪽 창 정보 먼저 여기서 갖고와서 코드 어쩌구
   				code = "";
   				if(res.sw=="ok"){
	   				$.each(res.datas,function(i,v){
	   					// getAllChatList
	   					
	   				});
   				}else{
   					/* 보유중인 채팅목록 없다고 출력문 만들기 */
   					/*
   						미완성
   					*/
   					code += "보유중인 채팅 목록이 없다고 표시"
   				}
   				
   			},
   			error : function(xhr){
   				alert('오류 : '+xhr.status);
   			}
   		});
   		
   	})
   	
   	function connecting(){
		// 인수값 정보 : 명령어 , 채팅방 번호 , 보내는 메시지
		// 웹소켓 초기화
	   	/*
	   		이 부분 아이피주소 테스트 환경에따라 계속 바꿔줘야함
	   	*/
		webSocket = new WebSocket("ws://192.168.35.47" + contextPath + "/webSocketSangchuTalk.do");
        
    	// 처음 접속 성공하면 
		webSocket.onopen = function onOpen(event){
    		
			webSocket.send( createMessage("connect", null) );
		}
        
		//메시지가 오면 messageTextArea요소에 메시지를 추가한다.
		webSocket.onmessage = function processMessge(message){
			// JSON 데이터를 먼저 풀고 채팅방 번호가 내가 접속해있는 채팅방 번호가 맞는지 먼저 확인해준다.
			// 해당 채팅방 번호가 맞으면 출력해준다. 보낸사람 아이디에 따라 출력문 정렬 위치가 바뀌는건 물론
			// Json 풀기
			var jsonData = JSON.parse(message.data);
			if(jsonData.user=="system"){
				alert(jsonData.message);
			}else{
				if(jsonData.message != null) {
					/*
						messageTextArea.value += jsonData.message + "\n";
						여기서 출력란의 부모요소를 가져와서 append해줘야함
					
					*/
					// 여기에 출력문을 만드는데... jsonData.user 를 닉네임하고 비교해서 출력문을 다르게 한다.
					// 스크립트 변수 : userNick
					/*
						
					*/
					messageTextArea.scrollTop = 9999999;
				};
			}
		}
        
		
		webSocket.onerror = function showErrorMsg(event) {
			alert("오류 : " + event.data);
		}
		
		webSocket.onclose = function(event){
			// 웹소켓에서 접속해제 했다는 메시지 날려주고 웹소켓을 null처리해 주는걸로
			webSocket.send( createMessage("runout", null) );
			webSocket.close();
		}
   	}
   	// connecting 함수 끝
   	
   
   	// 메시지 구조  {"command" : "명령종류", "room" : "채팅방번호", "message" : "메시지", "nickname" : "로그인유저vo의 닉네임정보" ,"email" : "로그인유저vo의이메일정보" }
   	// 명령 종류 : "connect" - 처음 접속, "message" - 메시지 전송, "runout" - 채팅방 나가기,  
   	
   	
	//메시지 보내기
	function sendMessage(){
		if(messageText.value.trim()==""){
			messageText.focus();
			return;
		}
		
		webSocket.send( createMessage("message", ""/*메시쥐~*/) );
		messageText.value = ""; 
	}
  	
   	// 전송할 메시지를 작성하는 함수
   	// json객체 형태로 만들어서 서블릿에서 fromjson으로 분해
   	function createMessage(command, message){
   		return '{"command" : "' + command + '", "room" : "' + room + '", "message" : "' + message + '", "nickname" : "'+userNick +'", "email" : "' + userMail + '"}';
   	}
    
	function closing(){
		webSocket.close();
	}
	
	window.onbeforeunload = function(){
		closing();
	}
</script>
</html>