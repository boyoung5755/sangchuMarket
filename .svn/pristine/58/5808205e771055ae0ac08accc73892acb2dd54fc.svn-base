<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<!--
	최초 작성자 : 김석호
	최초 작성일 : 2023.08.08 12:37
	
	마이페이지 우측 기본화면 하단 상추톡 페이지입니다.
	 
 -->
<title>채팅방 만드는중이에요..</title>
</head>
<body>

</body>
<script type="text/javascript">
   	let webSocket = null; // 웹소켓 변수 선언
	const messageTextArea = document.getElementById("messageTextArea");
   	const messageText = document.getElementById("messageText");
   	// 처음 접속하기 버튼 누를때 입력했던 사용자 ID
   	const userText = document.getElementById("userId");
   	
   	function connectting(){
   		if(userText.value.trim()==""){
   			alert("접속자 ID를 입력하세요");
   			userText.focus();
   			return;
   		}
		//웹소켓 초기화
		const contextPath = "<%=request.getContextPath()%>";
		webSocket = new WebSocket("ws://localhost" + contextPath + "/webSocketStudying.do");
        
    	// 처음 접속 성공하면 
		webSocket.onopen = function onOpen(event){
			document.getElementById("connectArea").style.display = "none";
			
			document.getElementById("chatRoom").style.display = "block";
			document.getElementById("chatArea").style.display = "block";
			// webSocket.send(userText.value);
			//				메시지 만드는 메소드    연결을 만드는데.. 전체 채팅방에 .. userText에 적힌 아이디로
			webSocket.send( createMessage("connect", "전체", userText.value) );
			//createMessage(command , )
		}
        
		//메시지가 오면 messageTextArea요소에 메시지를 추가한다.
		webSocket.onmessage = function processMessge(message){
			//Json 풀기
			var jsonData = JSON.parse(message.data);
			if(jsonData.message != null) {
					messageTextArea.value += jsonData.message + "\n"
					messageTextArea.scrollTop = 9999999;
			};
				
			// 채팅방 목록 출력하기
			if(jsonData.roomList != null){
				var jsonRoomList = JSON.parse(jsonData.roomList);
				var selElement = document.getElementById("chatRoomList");
				var strHtml = "";
				for(var i=0; i<jsonRoomList.length; i++){
					strHtml += "<option value='" + jsonRoomList[i] + "'>" + jsonRoomList[i] + "</option>";
				}
				selElement.innerHTML = strHtml;
			}
			
			if(jsonData.roomName != null){
				document.getElementById("chatRoomName").innerHTML = jsonData.roomName;
			}
           
			// 채팅방 멤버 목록 출력하기
			if(jsonData.roomMemList != null){
				var jsonRoomMemList = JSON.parse(jsonData.roomMemList);
				var selElement = document.getElementById("chatRoomMemList");
				var strHtml = "";
				for(var i=0; i<jsonRoomMemList.length; i++){
					strHtml += "<option value='" + jsonRoomMemList[i] + "'>" + jsonRoomMemList[i] + "</option>";
				}
				selElement.innerHTML = strHtml;
			}
		}
        
		webSocket.onerror = function showErrorMsg(event) {
			alert("오류 : " + event.data);
		}
		
		webSocket.onclose = function(event){
			messageTextArea.value = "";
			messageText.value = "";
			userText.value = "";
			document.getElementById("connectArea").style.display = "block";
			document.getElementById("chatRoom").style.display = "none";
			document.getElementById("chatArea").style.display = "none";
		}
   	}
   	
   
   	// 메시지 구조  {"command" : "명령종류", "room" : "채팅방이름", "message" : "메시지" }
   	// 명령 종류 : "create" - 채팅방 만들기, "change" - 채팅방 이동, "message" - 메시지 전송, "connect" - 처음 접속 
   	
   	
	//메시지 보내기
	function sendMessage(){
		if(messageText.value.trim()==""){
			messageText.focus();
			return;
		}
		var room = document.getElementById("chatRoomName").innerHTML.trim();
		
		//webSocket.send('{"room" : "' + "전체" + '", "message" : "' + messageText.value + '"}' );
		webSocket.send( createMessage("message", room, messageText.value) );
		messageText.value = ""; 
	}
  	
   	// 채팅방 만들기
   	/*
   	function createRoom(){
   		var newRoom = document.getElementById("newRoomName");
   		if(newRoom.value==""){
   			alert("생성할 채팅방을 입력한 후 사용하세요.")
   			newRoom.focus();
   			return;
   		}
   		webSocket.send( createMessage("create", newRoom.value, null) );
   		newRoom.value = ""; 
   	}
   	*/
   	
   	// 채팅방 이동
   	// 호출하는 곳에서 채팅방 번호를 인수로 전달
   	function chatRoomIn(c_no){
   		webSocket.send( createMessage("change", c_no, null) );
   	}
   	
   	// 채팅방 나가기  ==> 즉, '전체' 채팅방으로 이동
   	function chatRoomOut(){
   		webSocket.send( createMessage("change", "전체", null) );
   	}
   	
   	// 전송할 메시지를 작성하는 함수
   	// json객체 형태로 만들어서 서블릿에서 fromjson으로 분해
   	function createMessage(command, room, message){
   		return '{"command" : "' + command + '", "room" : "' + room + '", "message" : "' + message + '"}'
   	}
       
	function closing(){
		webSocket.close();
	}
	
	window.onbeforeunload = function(){
		closing();
	}
</script>
</html>