<?xml version="1.0" encoding="UTF-8"?>
<!-- 이 문서는 myBatis에서 처리할 SQL문을 작성하는 문서입니다. -->
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	최초 작성자 : 김석호
	최초 작성일 : 2023.08.10 10:25
	
	최근 수정자 : 김석호
	최근 수정일 : 2023.08.15 23:40
	
	수정내역
	2023.08.11 10:33 - 김석호 : 본인 거래글 정보 들고오는 쿼리문 추가
	2023.08.11 11:05 - 김석호 : 닉네임 변경용 쿼리문 추가
	2023.08.12 09:11 - 김석호 : 탈퇴 처리용 쿼리문 추가
	2023.08.12 11:24 - 김석호 : 거래이력 및 거래후기, 평점을 위해 해당정보 가져오는 쿼리문 추가
	2023.08.13 00:59 - 김석호 : 마이페이지에 출력되는 구매수, 판매수, 평점관련 쿼리문 추가
	2023.08.14 16:22 - 김석호 : 회원정보 수정 관련 쿼리문 추가
	2023.08.14 21:13 - 김석호 : 비밀번호 변경용 현재비밀번화 확인 쿼리문 추가
	2023.08.15 11:47 - 김석호 : 유저의 키워드 관리 관련 쿼리문 추가
	2023.08.15 23:40 - 김석호 : 관심 카테고리 추가 및 제거 쿼리문 추가
 -->
<mapper namespace="mypage">
	<!-- 유저의 이메일로 찜목록, 해당 거래글의 구분코드, 제목을 가지고 오는 쿼리문 -->
	<select id="getAllJjimList" parameterType="String" resultType="jjimVO">
		select j.t_no, j.email, tb.tb_title, t.t_state from t_jjim j, trade t, t_board tb where t.t_no = j.t_no and tb.t_no = j.t_no and j.email = #{email}
	</select>
	
	<!-- 거래번호로 이미지 테이블에서 대표이미지파일명을 하나 들고오는 쿼리문 -->
	<select id="getOneImgSrc" parameterType ="String" resultType="String">
		select img_src from images where img_code = #{t_no} and rownum = 1
	</select>
	
	<!-- 이메일로 본인이 등록한 거래글의 간략한 정보를 가지고 오는 쿼리문 -->
	<select id="getmyRegList" parameterType="String" resultType="regTradeVO">
		select t.t_no, tb.tb_title, t.t_state, t.t_type 
		from trade t, t_board tb
		where t.t_no = tb.t_no
		and t.email = #{email}
	</select>
	
	<!-- 변경하고자 하는 닉네임으로 레코드수를 받아오는 메소드 -->
	<select id="checkNickname" parameterType="String" resultType="Integer">
		select
			count(*)
		from
			users
		where u_nick = #{targetNickname}
	</select>
	
	<!-- 변경하고자 하는 닉네임으로 변경하는 메소드 -->
	<update id="updateNickName" parameterType="memVO">
		update users
		set
			u_nick = #{u_nick}
		where
			email = #{email}
	</update>
	
	<!-- 탈퇴 신청시 회원정보에 탈퇴일을 삽입하는 쿼리문 -->
	<update id="escapeHere" parameterType="String">
		update
			users
		set
			u_withdrawdate = sysdate
		where
			email = #{email}
	</update>
	
	<!-- <관리자 기능> 탈퇴당 신청일이 sysdate-7인 회원들의 email을 받아오는 쿼리문 -->
	<select id="whoIsRun" resultType="String">
		select
			email
		from
			users
		where
			 sysdate-7 >= u_withdrawdate
	</select>
	
	<!-- <관리자 기능> 탈퇴 신청일자가 sysdate-7인 회원을 일괄 삭제 처리해주는 쿼리문 -->
	<delete id="runOut">
		delete from users
		where
			sysdate-7 >= u_withdrawdate 
	</delete>
	
	<!-- <관리자 기능> users테이블에서 처리한 탈퇴회원을 목록에서 하나씩 빼서 all_users테이블에서 하나씩 삭제하기 위한 쿼리문 -->
	<delete id="runComplete" parameterType="String">
		delete from all_users
		where
			email = #{email}
	</delete>
	
	<!-- 거래기록과 거래후기평점을 관리하기 위해 해당 정보를 가져오는 쿼리문 -->
	<select id="forAllTradeLog" parameterType="String" resultType="tradeLogVO">
		select ts.c_no, aa.email, ts.sc_taken, ts.sc_given, tb.tb_title, tl.tl_finalprice, to_char(tl.tl_tdate,'yyyy-MM-dd') tl_tdate, t.t_no
		from (select a.c_no, a.t_no, t.email, tb.tb_title
		from t_chat a, trade t, t_board tb
		where a.t_no = t.t_no
		and t.t_no = tb.t_no
		and (a.email = #{email}
		    or t.email = #{email})) aa, t_score ts, t_board tb, t_chat tc, t_log tl, trade t
		where aa.c_no = ts.c_no
		and tb.t_no = tc.t_no
		and aa.c_no = tc.c_no
		and tc.c_no = tl.c_no
		and tb.t_no = t.t_no
		and tc.t_no = t.t_no
	</select>
	
	<!-- 유저의 판매수를 가져오는 쿼리문 -->
	<select id="cntSell" parameterType="String" resultType="Integer">
		select count(*) from trade t, t_chat tc, t_score ts
		where t.t_no = tc.t_no
		and tc.c_no = ts.c_no
		and((t.t_type='0' and t.email=#{email}) or (tc.email=#{email} and t.t_type='1'))
	</select>
	
	<!-- 유저의 구매수를 가져오는 쿼리문 -->
	<select id="cntBuy" parameterType="String" resultType="Integer">
		select count(*) from trade t, t_chat tc, t_score ts
		where t.t_no = tc.t_no
		and tc.c_no = ts.c_no
		and((t.t_type='1' and t.email=#{email}) or (tc.email=#{email} and t.t_type='0'))
	</select>
	
	<!-- 유저가 작성자일 때 받은 평점을 Integer List로 받아오는 쿼리문 -->
	<select id="takenSangchu" parameterType="String" resultType="Integer">
		select ts.sc_taken from trade t, t_chat tc, t_score ts
		where t.t_no = tc.t_no
		and tc.c_no = ts.c_no
		and t.email = #{email}
		and ts.sc_taken is not null
	</select>
	
	<!-- 유저가 거래상대일 때 받은 평점을 Integer List로 받아오는 쿼리문 -->
	<select id="givenSangchu" parameterType="String" resultType="Integer">
		select ts.sc_given from trade t, t_chat tc, t_score ts
		where t.t_no = tc.t_no
		and tc.c_no = ts.c_no
		and tc.email = #{email}
		and ts.sc_given is not null
	</select>
	
	<!-- 이미지 소스에 이미지가 있는지 먼저 확인만 하는 쿼리문 -->
	<select id="checkIsThereImage" parameterType="String" resultType="Integer">
		select count(*)
		from images
		where img_code = #{email}
	</select>
	
	<!-- 이미지 업데이트를 할때 먼저 날리는 삭제 쿼리문 -->
	<delete id="clearImageForUpdate" parameterType="String">
		delete from images
		where img_code = #{email}
	</delete>
	
	<!-- 이미지테이블에 회원이미지소스를 삽입하는 쿼리문 -->
	<insert id="updateInsertImage" parameterType="upMemVO">
		insert into images (img_code, img_src)
		values (#{email},#{img_src})
	</insert>
	
	<!-- 회원정보를 업데이트하는 쿼리문 -->
	<update id="updateMemberInfo" parameterType="upMemVO">
		update users
		set
			u_loc = #{u_loc},
			u_loc2 = #{u_loc2},
			u_tel = #{u_tel}
		where
			email = #{email}
	</update>
	
	<!-- 비밀번호 변경 쿼리문 -->
	<update id="updatePassword" parameterType="upMemVO">
		update all_users
		set
			pass = #{pass}
		where
			email = #{email}
	</update>
	
	<!-- 비밀번호 변경쿼리문 날린후 최근 비밀번호 변경일 최신화하는 쿼리문 -->
	<update id="updatePassdate" parameterType="String">
		update users
		set
			u_update = sysdate
		where
			email = #{email}
	</update>
	
	<!-- 비밀번호 변경시 현재 비밀번호 확인, 일치하는지 체크하는 쿼리문 -->
	<select id="checkPassword" parameterType="memVO" resultType="Integer">
		select count(*)
		from all_users
		where
			email = #{email}
		and
			pass = #{pass}
	</select>
	
	<!-- 유저의 키워드 등록 목록을 가져오는 쿼리문 -->
	<select id="getUserKeyword" parameterType="String" resultType="ukeyVO">
		select *
		from keyword
		where email = #{email}
	</select>
	
	<!-- 유저의 키워드를 삭제하는 쿼리문 -->
	<delete id="deleteUserKeyword" parameterType="ukeyVO">
		delete from keyword
		where
			email = #{email}
		and
			k_keyword = #{k_keyword}
	</delete>
	
	<!-- 24 : 유저의 키워드를 삽입하는 쿼리문 -->
	<insert id="insertUserKeyword" parameterType="ukeyVO">
		insert into keyword (email, k_keyword, k_code )
		values(#{email}, #{k_keyword}, #{k_code})
	</insert>
	
	<!-- 25 : 유저의 관심 키워드가 몇개인지 체크하는 쿼리문 -->
	<select id="countInKeyword" parameterType="String" resultType="Integer">
		select count(*)
		from keyword
		where email = #{email}
		and k_code = '1'
	</select>
	
	<!-- 26 : 유저의 차단 키워드가 몇개인지 체크하는 쿼리문 -->
	<select id="countBlKeyword" parameterType="String" resultType="Integer">
		select count(*)
		from keyword
		where email = #{email}
		and k_code = '2'
	</select>
	
	<!-- 27 : 유저가 등록하려는 키워드가 이미 등록되어있는지 확인하는 쿼리문 -->
	<select id="checkKeyword" parameterType="ukeyVO" resultType="Integer">
		select count(*)
		from keyword
		where email = #{email}
		and k_keyword = #{k_keyword}
	</select>
	
	<!-- 28 : 카테고리 하나를 제거하는 쿼리문 -->
	<delete id="delInterCat" parameterType="catManVO">
		delete from u_interest where email = #{email} and c_middlecat = #{c_middlecat}
	</delete>
	
	<!-- u_interest ui,  -->
	<!-- 29 : 등록하려는 카테고리가 이미 등록되어있는지 확인하는 쿼리문 -->
	<select id="isThereCatAlready" parameterType="catManVO" resultType="Integer">
		select count(*) from u_interest
		where email= #{email}
		and c_middlecat = #{c_middlecat}
	</select>
	
	<!-- 30 : 관심카테고리를 하나 삽입하는 쿼리문 -->
	<insert id="insertCat" parameterType="catManVO">
		insert into u_interest (email , c_middlecat)
		values(#{email}, #{c_middlecat})
	</insert>
	
	<!-- 31 : 대분류 코드를 파라미터로 받아서 해당하는 중분류 카테고리 목록을 받아오는 쿼리문 -->
	<select id="selectMiddlecat" parameterType="String" resultType="catMiddleVO">
		select
			*
		from
			cat_middle
		where
			c_largecat = #{c_largecat}
	</select>
	
	<!-- 32 : 유저의 관심카테고리가 이미 5개 차있는지 확인하는 쿼리문 -->
	<select id="countUserCat" parameterType="String" resultType="Integer">
		select count(*) from u_interest
		where email= #{email}
	</select>
	
	<!-- 33 : 유저가 등록해놓은 관심카테고리를 가져오는 쿼리문 -->
	<select id="myCatList" parameterType="String" resultType="catManVO">
		select ui.email, ui.c_middlecat, cm.c_name from u_interest ui, cat_middle cm
		where ui.c_middlecat = cm.c_middlecat
		and ui.email = #{email}
	</select>
	
	<!-- 34 : 유저의 차단목록을 가져오는 쿼리문 -->
	<select id="getMyBlackList" parameterType="String" resultType="blackVO">
		select
			ub.p_email, ubb.u_nick, to_char(ub.p_date,'yyyy-mm-dd') p_date
		from
			u_blacklist ub, users u, users ubb
		where
			u.email = ub.email
		and
			ub.p_email = ubb.email
		and
			u.email = #{email}
	</select>
	
	<!-- 35 : 유저가 차단 해제를 했을때 날리는 쿼리문 -->
	<delete id="setThemFree" parameterType="blackVO">
		delete from u_blacklist
		where
			email = #{email}
		and
			p_email = #{p_email}
	</delete>
	
	<!-- 36 : 자기 자신에게 온 거래 제의를 확인하는 쿼리문 -->
	<select id="getOfferToMe" parameterType="String" resultType="oManVO">
		select tf.c_no, tb.tb_title, u.u_nick, tf.o_loc, tf.o_loc2, tf.o_price, to_char(tf.o_date,'yyyy-MM-dd') o_date
		from trade t, t_chat tc, t_offer tf, t_board tb, users u
		where tc.c_no = tf.c_no
		and tc.t_no = t.t_no
		and tb.t_no = t.t_no
		and tc.email = u.email
		and t.t_state = '0'
		and t.email = #{email}
	</select>
	
	<!-- 37 : 거래글을 거래완료로 바꾸는 쿼리문 -->
	<update id="updateEndTradeState" parameterType="String">
		update trade set t_state = '2' where t_no = #{t_no}
	</update>
	
</mapper>




